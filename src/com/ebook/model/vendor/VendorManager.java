package com.ebook.model.vendor;

import java.util.HashSet;
import java.util.Set;

import com.ebook.dal.ProductDAO;
import com.ebook.dal.VendorDAO;
import com.ebook.model.item.Product;


public class VendorManager {
	private static VendorDAO vendDAO = new VendorDAO();
	private static ProductDAO productDAO = new ProductDAO();
	
	/**
	 * Adds a vendor to the DB with the given name. 
	 * @param vendorName The name of the vendor
	 * @return Vendor object created with the ID generated by the DB
	 */
	public static Vendor addVendor(String vendorName) {
		Vendor vendor = new Vendor(vendorName);	
		try {
			vendDAO.addVendor(vendor);
	    } catch (Exception se) {
	      System.err.println("VendorService: Threw a Exception adding Vendor.");
	      System.err.println(se.getMessage());
	    }
		return vendor;
	}
	
	/**
	 * Remove a vendor with the given ID
	 * @param vendorId
	 */
	public static void removeVendorById(Integer vendorId) {	
		try {
			vendDAO.removeVendor(vendorId);
	    } catch (Exception se) {
	      System.err.println("VendorService: Threw a Exception removing vendor.");
	      System.err.println(se.getMessage());
	    }
	}
	
	/**
	 * Returns a set of all vendors
	 * @return All vendors returned in a set. Vendors don't contain vendorLines
	 */
	public static Set<Vendor> getVendors() {
		Set<Vendor> vendors = new HashSet<Vendor>();
		try {
			vendors = vendDAO.getVendors();
		} catch (Exception se) {
			System.err.println("VendorService: Could not get vendors");
		}
		
		return vendors;
	}
	/**
	 * Returns a vendor for the given vendorID. 
	 * @param vendorId The vendor ID you would like to retrieve
	 * @return Vendor for the given ID.
	 */
	public static Vendor getVendorById(Integer vendorId) {
		Vendor vendor = null;
		try {
			vendor = vendDAO.getVendor(vendorId);
		} catch (Exception se) {
			System.err.println("VendorService: Could not find vendor id " + vendorId);
		}
		return vendor;
	}
	
	/**
	 * Adds a product to the vendors line
	 * @param vendorId ID of the vendor to update
	 * @param productTitle name of the product
	 * @param productPrice price of the product
	 * @return returns the price of the product that was added.
	 */
	public static Product addVendorProduct(Integer vendorId, String productTitle, double productPrice) {
		Vendor vendor = getVendorById(vendorId);
		if (vendor == null) {
			System.out.println("Vendor not found, no product added.");
			return null;
		}
		Product product = new Product(productTitle, productPrice);
		try {
			productDAO.addProduct(product);
			vendDAO.addVendorProduct(vendor, product);
	    } catch (Exception se) {
	      System.err.println("VendorService: Could not add product.");
	      System.err.println(se.getMessage());
	    }
		return product;
	}

	public static void removeVendorLine(Integer vendorId, Integer productId) {
		try {
			vendDAO.removeVendorLine(vendorId, productId);
	    } catch (Exception se) {
	      System.err.println("VendorService: Threw a Exception removing vendorLine.");
	      System.err.println(se.getMessage());
	    }
	}
}
